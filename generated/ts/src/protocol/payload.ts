// automatically generated by the FlatBuffers compiler, do not modify

/* eslint-disable @typescript-eslint/no-unused-vars, @typescript-eslint/no-explicit-any, @typescript-eslint/no-non-null-assertion */

import { Catalog } from '../protocol/catalog.js';
import { Create } from '../protocol/create.js';
import { Get } from '../protocol/get.js';
import { Register } from '../protocol/register.js';
import { Values } from '../protocol/values.js';


export enum Payload {
  NONE = 0,
  Create = 1,
  Get = 2,
  Values = 3,
  Catalog = 4,
  Register = 5
}

export function unionToPayload(
  type: Payload,
  accessor: (obj:Catalog|Create|Get|Register|Values) => Catalog|Create|Get|Register|Values|null
): Catalog|Create|Get|Register|Values|null {
  switch(Payload[type]) {
    case 'NONE': return null; 
    case 'Create': return accessor(new Create())! as Create;
    case 'Get': return accessor(new Get())! as Get;
    case 'Values': return accessor(new Values())! as Values;
    case 'Catalog': return accessor(new Catalog())! as Catalog;
    case 'Register': return accessor(new Register())! as Register;
    default: return null;
  }
}

export function unionListToPayload(
  type: Payload, 
  accessor: (index: number, obj:Catalog|Create|Get|Register|Values) => Catalog|Create|Get|Register|Values|null, 
  index: number
): Catalog|Create|Get|Register|Values|null {
  switch(Payload[type]) {
    case 'NONE': return null; 
    case 'Create': return accessor(index, new Create())! as Create;
    case 'Get': return accessor(index, new Get())! as Get;
    case 'Values': return accessor(index, new Values())! as Values;
    case 'Catalog': return accessor(index, new Catalog())! as Catalog;
    case 'Register': return accessor(index, new Register())! as Register;
    default: return null;
  }
}
